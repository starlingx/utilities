#!/bin/bash
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# Utility to reconfigure OAM and update sysadmin password
# by first ensuring sys-inv and mtc services are active
# and ready to accept the password change.
#

function check_rc_die {
    local -i rc=${1}
    msg=${2}
    if [ ${rc} -ne 0 ]; then
        log_fatal "${msg} [rc=${rc}]"
    fi
}

function log_fatal {
    echo "$(tput setaf 1)$(date "+%F %H:%M:%S") FATAL: ${*}$(tput sgr0)" >&2
    exit 1
}

function log_warn {
    echo "$(tput setaf 3)$(date "+%F %H:%M:%S"): WARN: ${*}$(tput sgr0)" >&2
}

function log_info {
    echo "$(date "+%F %H:%M:%S"): INFO: $*" >&2
}

function usage {
    cat <<ENDUSAGE
Utility to reconfigure OAM and update sysadmin password.

Usage:
   $(basename "$0") --oam_subnet <oam_subnet>
                    --oam_gateway_ip <oam_gateway_ip>
                    --oam_ip <oam_ip>
                    --new_password <new_password>

        --oam_subnet <subnet>: Specify OAM subnet
        --oam_gateway_ip <ip>: Specify OAM gateway IP
        --oam_ip <ip>: Specify OAM IP (the floating IP for duplex system)
        --oam_c0_ip <ip>: Specify Controller-0 OAM IP (required for duplex systems)
        --oam_c1_ip <ip>: Specify Controller-1 OAM IP (required for duplex systems)
        --new_password <password>: Specify new password for sysadmin user
ENDUSAGE
}

function verify_factory_install {
    log_info "Checking factory-install..."

    if [ ! -f /var/lib/factory-install/stage/final ]; then
        log_fatal "/var/lib/factory-install/stage/final does not exist. Ensure factory-install was successful."
    fi

    log_info "factory-install check successfull."
}

# The enroll-init reconfigure script runs during startup via cloud-init while
# system services may not be settled. This timing can lead to intermittent errors
# for early system commands. This function is used to mitigate these problems by
# retrying commands as needed.
function execute_with_retries {
    local command="$1"
    local retries=0
    local max_retries=10

    # TODO(srana): Consider checking a flag/service for
    # some of the commands executed using this function
    while [ $retries -lt $max_retries ]; do
        if $command; then
            return 0
        fi
        log_warn "Failed $command. Retrying in 30s ..."
        retries=$((retries + 1))
        sleep 30
    done

    return 1
}

function check_services_status {
    log_info "Checking services status..."
    max_retries=10
    retries=0

    while [ $retries -lt $max_retries ]; do
        sm_output=$(sm-dump)

        sysinv_status=$(echo "$sm_output" | awk '/sysinv-inv/ {print $2}')
        mtc_status=$(echo "$sm_output" | awk '/mtc-agent/ {print $2}')

        if [ "$sysinv_status" == "enabled-active" ] && [ "$mtc_status" == "enabled-active" ]; then
            log_info "Required services are now enabled-active."
            return 0
        else
            log_warn "Required services are not yet enabled-active. Retrying... "
        fi

        retries=$((retries + 1))
        sleep 30
    done

    log_fatal "Required services are not enabled-active after $max_retries attempts."
}

function load_credentials {
    log_info "Loading credentials..."

    if [ ! -f /etc/platform/openrc ]; then
        log_fatal "/etc/platform/openrc does not exist."
    fi

    if ! execute_with_retries "source /etc/platform/openrc"; then
        log_fatal "Failed to load credentials after multiple attempts."
    fi

    log_info "Credentials loaded successfully."
}

# Ensure OAM reconfiguration is required by comparing the current system
# OAM configuration values to the input reconfiguration values. This helps
# avoid unnecessary calls to system oam-modify, which could cause issues
# in later enrollment steps. For example, a timing issue has been observed
# because the OAM IP is already available, service endpoint IPs are configured,
# but rerunning the Puppet manifest interferes with enrollment.
CURRENT_OAM_IP=""
function check_reconfigure_OAM {
    system_mode=$(awk -F= '/system_mode/ {print $2}' /etc/platform/platform.conf)

    log_info "Checking if OAM reconfiguration is necessary..."

    if ! execute_with_retries "system oam-show"; then
        log_fatal "system oam-show failed after multiple attempts."
    fi

    oam_show_output=$(system oam-show)

    check_rc_die $? "system oam-show failed"

    reconfig_required=false

    if [ "$system_mode" = "duplex" ]; then
        # DX: Current system oam values
        oam_c0_ip=$(echo "$oam_show_output" | awk '/oam_c0_ip/ {print $4}')
        CURRENT_OAM_IP=$oam_c0_ip
        oam_c1_ip=$(echo "$oam_show_output" | awk '/oam_c1_ip/ {print $4}')
        oam_floating_ip=$(echo "$oam_show_output" | awk '/oam_floating_ip/ {print $4}')
        oam_gateway_ip=$(echo "$oam_show_output" | awk '/oam_gateway_ip/ {print $4}')
        oam_subnet=$(echo "$oam_show_output" | awk '/oam_subnet/ {print $4}')

        log_info "C0 IP: current - $oam_c0_ip, reconfig - $OAM_C0_IP
                  C1 IP: current - $oam_c1_ip, reconfig - $OAM_C1_IP
                  Floating IP: current - $oam_floating_ip, reconfig - $OAM_IP
                  Gateway IP: current - $oam_gateway_ip, reconfig - $OAM_GATEWAY_IP
                  Subnet: current - $oam_subnet, reconfig - $OAM_SUBNET"

        # Compare the current settings with the input values
        if [ "$oam_c0_ip" != "$OAM_C0_IP" ] || [ "$oam_c1_ip" != "$OAM_C1_IP" ] || \
           [ "$oam_floating_ip" != "$OAM_IP" ] || [ "$oam_gateway_ip" != "$OAM_GATEWAY_IP" ] || \
           [ "$oam_subnet" != "$OAM_SUBNET" ]; then
            reconfig_required=true
        fi
    else
        # SX: Current system oam values
        oam_ip=$(echo "$oam_show_output" | awk '/oam_ip/ {print $4}')
        CURRENT_OAM_IP=$oam_ip
        oam_gateway_ip=$(echo "$oam_show_output" | awk '/oam_gateway_ip/ {print $4}')
        oam_subnet=$(echo "$oam_show_output" | awk '/oam_subnet/ {print $4}')

        log_info "IP: current - $oam_ip, reconfig - $OAM_IP
                  Gateway IP: current - $oam_gateway_ip, reconfig - $OAM_GATEWAY_IP
                  Subnet: current - $oam_subnet, reconfig - $OAM_SUBNET"

        # Compare the current settings with the input values
        if [ "$oam_ip" != "$OAM_IP" ] || [ "$oam_gateway_ip" != "$OAM_GATEWAY_IP" ] || \
           [ "$oam_subnet" != "$OAM_SUBNET" ]; then
            reconfig_required=true
        fi
    fi

    if [ "$reconfig_required" = true ]; then
        log_info "OAM reconfiguration is required."
        return 0
    else
        log_info "OAM reconfiguration is not required."
        return 1
    fi
}

function is_ipv6 {
    local addr=$1
    # simple check for ':'
    if [ "${addr/:/}" != "${addr}" ]; then
        # addr is ipv6
        return 0
    fi
    return 1
}

#
# display network info
#
function display_network_info {
    local contents
    contents=$(
        {
            echo
            echo "************ Links/addresses ************"
            /usr/sbin/ip addr show
            echo "************ IPv4 routes ****************"
            /usr/sbin/ip route show
            echo "************ IPv6 routes ****************"
            /usr/sbin/ip -6 route show
            echo "*****************************************"
        }
    )
    log_info "Network info:${contents}"
}


function do_network_cleanup {
    local if_name=$1
    local oam_if_label=$2

    local ip_command='ip'
    if is_ipv6 "${OAM_IP}"; then
       ip_command='ip -6'
    fi

    display_network_info

    # We need new OAM connection to complete oam-modify, so should not loose OAM connection
    # established by cloud-init. "if_name" interface has new OAM IP configured by cloud-init.
    #
    # oam-modify triggers puppet runtime 1) ifdown OAM-label, this deletes old OAM IP and default OAM route
    # 2) changes ifcfg file and 3) ifup OAM-label, this fails as it has
    # conflict to cloud-init provisioned OAM IP, and the default OAM route
    # don't get reinstalled.
    #
    # To preserve the OAM route:
    # Here we are forcing the OAM label-interface down, so that old OAM IP and default OAM route
    # get cleaned up, and adding the default OAM route back again.
    # With this oam-modify puppet runtime, do nothing on above step 1) ifdown, as the interface is
    # already down, and won't delete exisiting OAM default route.
    # As end result, after oam-modify, we will still have new IP and default OAM route.
    #
    log_info "Forcing current OAM label interface:$oam_if_label down"
    ifdown_results=$(ifdown ${oam_if_label} --force 2>&1)
    log_info "ifdown errors: ${ifdown_results}"

    # Add the default route back
    ip_route_results=$(${ip_command} route add default via ${OAM_GATEWAY_IP} dev ${if_name} 2>&1)
    log_info "ip route add errors: ${ip_route_results}"

    display_network_info
    return 0
}

# Figure out OAM reconfiguration interface/vlan (cloud-init network-config's interface/vlan)
# is same as factory installed OAM's interface/vlan or not. Returns 0 if it is same, with the
# cloud-init's if-name value on CLOUD_INIT_OAM_IF_NAME variable.
CLOUD_INIT_OAM_IF_NAME=""
function check_oam_reconfiguration_on_same_interface {
    local cfg=/etc/network/interfaces.d/50-cloud-init
    local iface_line=''
    local vlan_raw_device_line=''
    local if_name=''
    local vlan_raw_device=''
    local vlan_id=''
    if [ -f ${cfg} ]; then
        iface_line=$( cat ${cfg} |grep ^iface | grep -v 'iface lo' )
        if_name=$( echo "${iface_line}" | awk '{print $2}' )
        regex="(vlan[0-9]+)|(.*\..*)"
        if [[ ${if_name} =~ ${regex} ]]; then
           vlan_raw_device_line=$( grep vlan-raw-device ${cfg} )
           vlan_raw_device=$( echo "${vlan_raw_device_line}" | awk '{print $2}' )
           vlan_id=$( echo "${if_name}" | grep -o '[0-9]*')
        fi
    fi

    log_info "${cfg} parameters: if_name:${if_name} vlan_raw_device:${vlan_raw_device} vlan_id:${vlan_id}"
    if [[ ${if_name} == "" ]]; then
         log_info "No cloud-init interface found, nothing to do."
         return 1
    fi

    command="system interface-network-list controller-0 --nowrap"
    if ! execute_with_retries "$command"; then
        log_fatal "$command failed after mutiple attempts."
    fi
    oam_if=$($command | awk '$8 == "oam" { print $6 }')
    check_rc_die $? "system interface-network-list failed"
    #type, vlan id, ports, uses i/f

    command="system host-if-list controller-0 --nowrap"
    if ! execute_with_retries "$command"; then
        log_fatal "$command failed after mutiple attempts."
    fi
    host_if_list_output=$($command)
    oam_if_details=$(echo "$host_if_list_output" | awk -v oam_if="$oam_if" '$4 == oam_if { print $8 " " $10 " " $12 " " $14 }')
    check_rc_die $? "OAM interface details parsing failed"
    log_info "OAM type, vlan id, ports, uses i/f: ${oam_if_details}"
    oam_if_type=$( echo "${oam_if_details}" | awk '{print $1}' )
    # In case of existing OAM interface of ethernet type, check if OAM reconfiguration is on same physical interface without vlan-id
    if [[ ${oam_if_type} == "ethernet" ]]; then
       oam_if_port=$( echo "${oam_if_details}" | awk '{print $3}' | sed -E "s/^\['([^']+)'.*$/\1/" )
       log_info "OAM is of ethernet type, port:${oam_if_port}"
       if [[ ${oam_if_port} == ${if_name} ]] && [[ ${vlan_raw_device} == '' ]] && [[ ${vlan_id} == '' ]]; then
           CLOUD_INIT_OAM_IF_NAME=${if_name}
           return 0
       fi
    # In case of existing OAM interface of vlan type, check if OAM reconfiguration is on same physical interface and vlan-id
    elif [[ ${oam_if_type} == "vlan" ]]; then
       oam_vlan_id=$( echo "${oam_if_details}" | awk '{print $2}' )
       oam_vlan_uses_if=$( echo "${oam_if_details}" | awk '{print $4}' | sed -E "s/^\['([^']+)'.*$/\1/" )

       oam_vlan_raw_device=$(echo "$host_if_list_output" | awk -v uses_if="$oam_vlan_uses_if" '$4 == uses_if { print $12 }' | sed -E "s/^\['([^']+)'.*$/\1/" )
       check_rc_die $? "OAM vlan raw device parsing failed"
       log_info "OAM is of VLAN type, vlan_raw_device:${oam_vlan_raw_device} vlan_id:${oam_vlan_id}"
       if [[ ${oam_vlan_raw_device} == ${vlan_raw_device} ]] && [[ ${oam_vlan_id} == ${vlan_id} ]]; then
           CLOUD_INIT_OAM_IF_NAME=${if_name}
           return 0
       fi
    fi
    return 1
}

function reconfigure_OAM {
    system_mode=$(awk -F= '/system_mode/ {print $2}' /etc/platform/platform.conf)

    args="oam_subnet=$OAM_SUBNET oam_gateway_ip=$OAM_GATEWAY_IP"

    if [ "$system_mode" = "duplex" ]; then
        if [ -z "$OAM_C0_IP" ] || [ -z "$OAM_C1_IP" ]; then
            log_fatal "Missing required arguments. Please specify both --oam_c0_ip and --oam_c1_ip"
        fi

        args="$args oam_floating_ip=$OAM_IP oam_c0_ip=$OAM_C0_IP oam_c1_ip=$OAM_C1_IP"
    else
        args="$args oam_ip=$OAM_IP"
    fi

    log_info "Reconfiguring OAM: $args ..."

    if ! execute_with_retries "system oam-modify $args"; then
        log_fatal "system oam-modify failed after mutiple attempts."
    fi

    # Apply manifest for duplex systems
    if [ "$system_mode" = "duplex" ]; then
        log_info "Applying manifest ..."
        source /etc/build.info
        OAM_CONFIG_DIR="/tmp/oam_config"
        rm -rf $OAM_CONFIG_DIR
        mkdir -p $OAM_CONFIG_DIR

        # The applied manifest must align with sysinv update_oam_config()
        cat > $OAM_CONFIG_DIR/oam_runtime.yml <<EOF
classes: ['platform::network::runtime',
'platform::kubernetes::certsans::runtime',
'platform::firewall::runtime',
'platform::smapi',
'platform::sm::update_oam_config::runtime',
'platform::nfv::webserver::runtime',
'platform::haproxy::runtime',
'openstack::keystone::endpoint::runtime::post',
'platform::dockerdistribution::config',
'platform::dockerdistribution::runtime']
EOF
        log_info "Wait 2m for system to settle and run puppet-manifest-apply ..."

        sleep 120

        /usr/local/bin/puppet-manifest-apply.sh \
            /opt/platform/puppet/$SW_VERSION/hieradata/ \
            controller-0 \
            controller \
            runtime \
            $OAM_CONFIG_DIR/oam_runtime.yml

        check_rc_die $? "puppet-manifest-apply failed"

        rm -rf $OAM_CONFIG_DIR
    fi
}

function reconfigure_password {
    log_info "Reconfiguring sysadmin password..."
    echo "sysadmin:$NEW_PASSWORD" | sudo chpasswd -e
    check_rc_die $? "chpasswd failed"
}

# Declare required variables
OAM_SUBNET=""
OAM_GATEWAY_IP=""
OAM_IP=""
OAM_C0_IP=""
OAM_C1_IP=""
NEW_PASSWORD=""

log_info "Starting enroll-init reconfiguration..."

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        --oam_subnet)
            OAM_SUBNET="$2"
            shift 2
            ;;
        --oam_gateway_ip)
            OAM_GATEWAY_IP="$2"
            shift 2
            ;;
        --oam_ip)
            OAM_IP="$2"
            shift 2
            ;;
        --oam_c0_ip)
            OAM_C0_IP="$2"
            shift 2
            ;;
        --oam_c1_ip)
            OAM_C1_IP="$2"
            shift 2
            ;;
        --new_password)
            NEW_PASSWORD="$2"
            shift 2
            ;;
        *)
            log_fatal "Unexpected option: $1"
            ;;
    esac
done

# Ensure all required arguments are provided
if [ -z "$OAM_SUBNET" ] || [ -z "$OAM_GATEWAY_IP" ] || [ -z "$OAM_IP" ] || [ -z "$NEW_PASSWORD" ]; then
    usage
    log_fatal "Missing required arguments"
fi

# Main execution flow
verify_factory_install
load_credentials
check_services_status

if check_reconfigure_OAM; then
    if check_oam_reconfiguration_on_same_interface; then
        # OAM reconfiguration requested on same interface/vlan as factory-installed OAM interface
        #
        # ip addr show command doesn't display IPv6 addresses with alias label, so this would work only on IPv4 address:
        # current_oam_if_name_with_label=$(ip addr show $CLOUD_INIT_OAM_IF_NAME|grep $CURRENT_OAM_IP |grep -oP '\b'$CLOUD_INIT_OAM_IF_NAME'[^\s]*')
        # Check directly on ifcfg file, to figure out the label/alias, which works for both IPv4 and IPv6 addresses:
        current_oam_if_name_with_label=$(grep $CURRENT_OAM_IP /etc/network/interfaces.d/ifcfg-* | grep -oP '\b'$CLOUD_INIT_OAM_IF_NAME':[^:]*')
        log_info "Current OAM IF label (alias):$current_oam_if_name_with_label."

        # Here, reconfiguration is only for address change, which is supported by oam-modify itself.
        # We still need new OAM connection to complete oam-modify, so should not loose OAM connection
        # established by cloud-init.
        # This new IP provisioned by cloud-init collides with oam-modify triggered puppet oam network
        # reconfiguration, causing default OAM route missing. To avoid this, we do some cleanup.
        do_network_cleanup ${CLOUD_INIT_OAM_IF_NAME} ${current_oam_if_name_with_label}
    fi

    reconfigure_OAM
fi

reconfigure_password

touch /var/lib/factory-install/state/enroll-init

log_info "Successfully completed reconfiguration for enrollment."
