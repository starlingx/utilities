#!/bin/bash
#
# Copyright (c) 2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# Utility to reconfigure OAM and update sysadmin password
# by first ensuring sys-inv and mtc services are active
# and ready to accept the password change.
#

function check_rc_die {
    local -i rc=${1}
    msg=${2}
    if [ ${rc} -ne 0 ]; then
        log_fatal "${msg} [rc=${rc}]"
    fi
}

function log_fatal {
    echo "$(tput setaf 1)$(date "+%F %H:%M:%S") FATAL: ${*}$(tput sgr0)" >&2
    exit 1
}

function log_warn {
    echo "$(tput setaf 3)$(date "+%F %H:%M:%S"): WARN: ${*}$(tput sgr0)" >&2
}

function log_info {
    echo "$(date "+%F %H:%M:%S"): INFO: $*" >&2
}

function usage {
    cat <<ENDUSAGE
Utility to reconfigure OAM and update sysadmin password.

Usage:
   $(basename "$0") --oam_subnet <oam_subnet>
                    --oam_gateway_ip <oam_gateway_ip>
                    --oam_ip <oam_ip>
                    --new_password <new_password>

        --oam_subnet <subnet>: Specify OAM subnet
        --oam_gateway_ip <ip>: Specify OAM gateway IP
        --oam_ip <ip>: Specify OAM IP (the floating IP for duplex system)
        --oam_c0_ip <ip>: Specify Controller-0 OAM IP (required for duplex systems)
        --oam_c1_ip <ip>: Specify Controller-1 OAM IP (required for duplex systems)
        --new_password <password>: Specify new password for sysadmin user
ENDUSAGE
}

function verify_factory_install {
    log_info "Checking factory-install..."

    if [ ! -f /var/lib/factory-install/stage/final ]; then
        log_fatal "/var/lib/factory-install/stage/final does not exist. Ensure factory-install was successful."
    fi

    log_info "factory-install check successfull."
}

function check_services_status {
    log_info "Checking services status..."
    max_retries=10
    retries=0

    while [ $retries -lt $max_retries ]; do
        sm_output=$(sm-dump)

        sysinv_status=$(echo "$sm_output" | awk '/sysinv-inv/ {print $2}')
        mtc_status=$(echo "$sm_output" | awk '/mtc-agent/ {print $2}')

        if [ "$sysinv_status" == "enabled-active" ] && [ "$mtc_status" == "enabled-active" ]; then
            log_info "Required services are now enabled-active."
            return 0
        else
            log_warn "Required services are not yet enabled-active. Retrying... "
        fi

        retries=$((retries + 1))
        sleep 30
    done

    log_fatal "Required services are not enabled-active after $max_retries attempts."
}

function load_credentials {
    log_info "Loading credentials..."
    max_retries=10
    retries=0

    if [ ! -f /etc/platform/openrc ]; then
        log_fatal "/etc/platform/openrc does not exist."
    fi

    while [ $retries -lt $max_retries ]; do
        if source /etc/platform/openrc; then
            log_info "Credentials loaded successfully."
            return 0
        else
            log_warn "Failed to load credentials (waiting for the host to become active). Retrying..."
        fi

        retries=$((retries + 1))
        sleep 30
    done

    log_fatal "Failed to load credentials."
}

function reconfigure_OAM {
    system_mode=$(awk -F= '/system_mode/ {print $2}' /etc/platform/platform.conf)

    args="oam_subnet=$OAM_SUBNET oam_gateway_ip=$OAM_GATEWAY_IP"

    if [ "$system_mode" = "duplex" ]; then
        if [ -z "$OAM_C0_IP" ] || [ -z "$OAM_C1_IP" ]; then
            log_fatal "Missing required arguments. Please specify both --oam_c0_ip and --oam_c1_ip"
        fi

        args="$args oam_floating_ip=$OAM_IP oam_c0_ip=$OAM_C0_IP oam_c1_ip=$OAM_C1_IP"
    else
        args="$args oam_ip=$OAM_IP"
    fi

    log_info "Reconfiguring OAM: $args ..."

    max_retries=10
    retries=0

    # May fail if the system command is issued too early,
    # before the endpoint is reachable to modify oam.
    # TODO(srana): Consider checking a flag/service
    while [ $retries -lt $max_retries ]; do
        if system oam-modify $args; then
            break
        fi
        log_warn "Failed to modify oam. Retrying in 30s ..."
        retries=$((retries + 1))
        sleep 30
    done

    check_rc_die $? "system oam-modify failed"

    # Apply manifest for duplex systems
    if [ "$system_mode" = "duplex" ]; then
        log_info "Applying manifest ..."
        source /etc/build.info
        OAM_CONFIG_DIR="/tmp/oam_config"
        rm -rf $OAM_CONFIG_DIR
        mkdir -p $OAM_CONFIG_DIR

        # The applied manifest must align with sysinv update_oam_config()
        cat > $OAM_CONFIG_DIR/oam_runtime.yml <<EOF
classes: ['platform::network::runtime',
'platform::kubernetes::certsans::runtime',
'platform::firewall::runtime',
'platform::smapi',
'platform::sm::update_oam_config::runtime',
'platform::nfv::webserver::runtime',
'platform::haproxy::runtime',
'openstack::keystone::endpoint::runtime::post',
'platform::dockerdistribution::config',
'platform::dockerdistribution::runtime']
EOF
        log_info "Wait 2m for system to settle and run puppet-manifest-apply ..."

        sleep 120

        /usr/local/bin/puppet-manifest-apply.sh \
            /opt/platform/puppet/$SW_VERSION/hieradata/ \
            controller-0 \
            controller \
            runtime \
            $OAM_CONFIG_DIR/oam_runtime.yml

        check_rc_die $? "puppet-manifest-apply failed"

        rm -rf $OAM_CONFIG_DIR
    fi
}

function reconfigure_password {
    log_info "Reconfiguring sysadmin password..."
    echo "sysadmin:$NEW_PASSWORD" | sudo chpasswd -e
    check_rc_die $? "chpasswd failed"
}

# Declare required variables
OAM_SUBNET=""
OAM_GATEWAY_IP=""
OAM_IP=""
OAM_C0_IP=""
OAM_C1_IP=""
NEW_PASSWORD=""

log_info "Starting enroll-init reconfiguration..."

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        --oam_subnet)
            OAM_SUBNET="$2"
            shift 2
            ;;
        --oam_gateway_ip)
            OAM_GATEWAY_IP="$2"
            shift 2
            ;;
        --oam_ip)
            OAM_IP="$2"
            shift 2
            ;;
        --oam_c0_ip)
            OAM_C0_IP="$2"
            shift 2
            ;;
        --oam_c1_ip)
            OAM_C1_IP="$2"
            shift 2
            ;;
        --new_password)
            NEW_PASSWORD="$2"
            shift 2
            ;;
        *)
            log_fatal "Unexpected option: $1"
            ;;
    esac
done

# Ensure all required arguments are provided
if [ -z "$OAM_SUBNET" ] || [ -z "$OAM_GATEWAY_IP" ] || [ -z "$OAM_IP" ] || [ -z "$NEW_PASSWORD" ]; then
    usage
    log_fatal "Missing required arguments"
fi

# Main execution flow
verify_factory_install
load_credentials
check_services_status
reconfigure_OAM
reconfigure_password

touch /var/lib/factory-install/state/enroll-init

log_info "Successfully reconfigured OAM network and system password."
