#
# Copyright (c) 2025 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# =========================================================
# vCSR GENERIC DEPLOYMENT TEMPLATE (Kubernetes/StarlingX)
# =========================================================
# This YAML manifest demonstrates how to deploy a Virtual Cell
# Site Router (vCSR) pod connected to multiple networks using
# SR-IOV, and VLAN interfaces in StarlingX.
#
# HOW TO CUSTOMIZE FOR YOUR ENVIRONMENT:
#
# For each NetworkAttachmentDefinition (NAD) below, you MUST review
# and update the following fields according to your network setup:
#
# - vcsr-midhaul-uplink:
#   - "vlanId":
#       - Must match the VLAN ID configured on the switch side.
#       - **DO NOT** use the factory/enrollment VLANs from StarlingX
#   - "ipam"."addresses":
#       - Set IPv4 and/or IPv6 addresses according to your deployment.
#       - Can be IPv4-only, IPv6-only, or dual-stack.
#       - The address must belong to the switch's gateway subnet.
#   - "ipam"."routes":
#       - Set default gateway(s) as appropriate (IPv4 and/or IPv6).
#       - If using IPv6, be sure to add the default route with a low metric
#         (e.g. "metric": "1")â€”the CNI plugin does not do this automatically.
#         This is also handled in the DaemonSet's initContainer.
#
# - vcsr-midhaul-oam-gateway and vcsr-midhaul-admin-gateway:
#   - "vlanId":
#       - Must match the VLAN IDs used in your subcloud enrollment.
#   - "ipam"."addresses":
#       - Set IPv4 and/or IPv6 addresses that fit within the selected subnet
#         from enrollment.
#
# NOTE:
# Additional images are expected to be included in the image
# bundle used to generate the pre-staged ISO for this application:
#
#   docker.io/busybox:latest,bootstrap
#   centos/tools:latest,bootstrap
#
# If you use different images, make sure to add them to the image
# bundle as well.
#
# This template should be freely extended, reduced, or otherwise modified
# for your production deployment.
# =========================================================================

---
# This NAD connects a subcloud to the DC router via SR-IOV.
# It will be exposed inside the pod as interface net1.
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vcsr-midhaul-vf
  namespace: vcsr
  annotations:
    k8s.v1.cni.cncf.io/resourceName: intel.com/pci_sriov_net_vcsr_midhaul
spec:
  config: |
    {
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "sriov",
          "name": "vcsr-midhaul",
          "trust": "on",
          "spoofchk": "off"
        }
      ]
    }
---
# This NAD connects the pod to the subcloud uplink/WAN network (VLAN).
# It will be exposed inside the pod as interface net2.
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vcsr-midhaul-uplink
  namespace: vcsr
spec:
  config: |
    {
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "vlan",
          "name": "uplink0",
          "master": "net1",
          "mtu": 1500,
          "vlanId": 22,
          "linkInContainer": true,
          "ipam": {
            "type": "static",
            "addresses": [
              { "address": "10.10.251.2/24" },
              { "address": "fdff:10:10:251:0::2/64"}
            ],
            "routes": [
                { "dst": "0.0.0.0/0", "gw": "10.10.251.1" },
                { "dst": "::/0", "gw": "fdff:10:10:251:0::1", "metric": "1" }
            ]
          }
        }
      ]
    }
---
# This NAD connects the pod to the subcloud OAM network (VLAN).
# Will appear as another interface inside the pod (e.g., net3).
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vcsr-midhaul-oam-gateway
  namespace: vcsr
spec:
  config: |
    {
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "vlan",
          "name": "oamgw0",
          "master": "net1",
          "mtu": 1500,
          "vlanId": 5,
          "linkInContainer": true,
          "ipam": {
            "type": "static",
            "addresses": [
              { "address": "10.10.252.1/24" },
              { "address": "fdff:10:10:252:0::1/64"}
            ]
          }
        }
      ]
    }
---
# This NAD connects the pod to the subcloud ADMIN/MGMT network (VLAN).
# Will appear as another interface inside the pod (e.g., net4).
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vcsr-midhaul-admin-gateway
  namespace: vcsr
spec:
  config: |
    {
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "vlan",
          "name": "admingw0",
          "master": "net1",
          "mtu": 1500,
          "vlanId": 6,
          "linkInContainer": true,
          "ipam": {
            "type": "static",
            "addresses": [
              { "address": "10.10.253.1/24" },
              { "address": "fdff:10:10:253:0::1/64"}
            ]
          }
        }
      ]
    }
---
#############################################################
# DaemonSet to deploy the vCSR pod on every node.
# You can replace DaemonSet with Deployment/StatefulSet as needed.
#############################################################
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: open-vcsr
  name: open-vcsr
  namespace: vcsr
spec:
  selector:
    matchLabels:
      app: open-vcsr
  template:
    metadata:
      labels:
        app: open-vcsr
        restart-on-reboot: "true"
      annotations:
        # This annotation lists all the NADs attached to the pod.
        # The order matches net1, net2, net3, ... inside the container.
        k8s.v1.cni.cncf.io/networks: '[
            {"name":"vcsr-midhaul-vf"},
            {"name":"vcsr-midhaul-uplink"},
            {"name":"vcsr-midhaul-oam-gateway"},
            {"name":"vcsr-midhaul-admin-gateway"}
        ]'
    spec:
      containers:
      - image: centos/tools
        imagePullPolicy: IfNotPresent
        name: open-vcsr
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 300000; done;" ]
        securityContext:
          privileged: true
        resources:
          requests:
            intel.com/pci_sriov_net_vcsr_midhaul: '1'  # Requests one SR-IOV VF
          limits:
            intel.com/pci_sriov_net_vcsr_midhaul: '1'
      initContainers:
      - name: sysctl-init
        image: busybox:latest
        command: [ "/bin/sh", "-c" ]
        securityContext:
          privileged: true
        args:
        - |
          # Enable forwarding in the node for L3 routing (IPv4 and IPv6)
          sysctl -w net.ipv6.conf.all.forwarding=1
          sysctl -w net.ipv4.ip_forward=1
          # Add IPv6 default route with low metric (if required for your config)
          ip route add default via fdff:10:10:251:0::1 metric 1
          # Add any extra routes here if needed
